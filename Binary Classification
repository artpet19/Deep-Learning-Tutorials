{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "5b534f2f",
   "metadata": {
    "papermill": {
     "duration": 0.005695,
     "end_time": "2024-08-19T19:06:21.055566",
     "exception": false,
     "start_time": "2024-08-19T19:06:21.049871",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**This notebook is an exercise in the [Intro to Deep Learning](https://www.kaggle.com/learn/intro-to-deep-learning) course.  You can reference the tutorial at [this link](https://www.kaggle.com/ryanholbrook/binary-classification).**\n",
    "\n",
    "---\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "38839add",
   "metadata": {
    "papermill": {
     "duration": 0.004864,
     "end_time": "2024-08-19T19:06:21.066009",
     "exception": false,
     "start_time": "2024-08-19T19:06:21.061145",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Introduction #\n",
    "\n",
    "In this exercise, you'll build a model to predict hotel cancellations with a binary classifier."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "cdae943b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-19T19:06:21.077136Z",
     "iopub.status.busy": "2024-08-19T19:06:21.076792Z",
     "iopub.status.idle": "2024-08-19T19:06:21.829099Z",
     "shell.execute_reply": "2024-08-19T19:06:21.828332Z"
    },
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.760437,
     "end_time": "2024-08-19T19:06:21.831424",
     "exception": false,
     "start_time": "2024-08-19T19:06:21.070987",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_26/3338970720.py:3: MatplotlibDeprecationWarning: The seaborn styles shipped by Matplotlib are deprecated since 3.6, as they no longer correspond to the styles shipped by seaborn. However, they will remain available as 'seaborn-v0_8-<style>'. Alternatively, directly use the seaborn API instead.\n",
      "  plt.style.use('seaborn-whitegrid')\n"
     ]
    }
   ],
   "source": [
    "# Setup plotting\n",
    "import matplotlib.pyplot as plt\n",
    "plt.style.use('seaborn-whitegrid')\n",
    "# Set Matplotlib defaults\n",
    "plt.rc('figure', autolayout=True)\n",
    "plt.rc('axes', labelweight='bold', labelsize='large',\n",
    "       titleweight='bold', titlesize=18, titlepad=10)\n",
    "plt.rc('animation', html='html5')\n",
    "\n",
    "# Setup feedback system\n",
    "from learntools.core import binder\n",
    "binder.bind(globals())\n",
    "from learntools.deep_learning_intro.ex6 import *"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "99cb9cd7",
   "metadata": {
    "papermill": {
     "duration": 0.004259,
     "end_time": "2024-08-19T19:06:21.840403",
     "exception": false,
     "start_time": "2024-08-19T19:06:21.836144",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "First, load the *Hotel Cancellations* dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4709173f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-19T19:06:21.850449Z",
     "iopub.status.busy": "2024-08-19T19:06:21.850049Z",
     "iopub.status.idle": "2024-08-19T19:06:24.380750Z",
     "shell.execute_reply": "2024-08-19T19:06:24.379925Z"
    },
    "lines_to_next_cell": 2,
    "papermill": {
     "duration": 2.538331,
     "end_time": "2024-08-19T19:06:24.383046",
     "exception": false,
     "start_time": "2024-08-19T19:06:21.844715",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.pipeline import make_pipeline\n",
    "from sklearn.compose import make_column_transformer\n",
    "\n",
    "hotel = pd.read_csv('../input/dl-course-data/hotel.csv')\n",
    "\n",
    "X = hotel.copy()\n",
    "y = X.pop('is_canceled')\n",
    "\n",
    "X['arrival_date_month'] = \\\n",
    "    X['arrival_date_month'].map(\n",
    "        {'January':1, 'February': 2, 'March':3,\n",
    "         'April':4, 'May':5, 'June':6, 'July':7,\n",
    "         'August':8, 'September':9, 'October':10,\n",
    "         'November':11, 'December':12}\n",
    "    )\n",
    "\n",
    "features_num = [\n",
    "    \"lead_time\", \"arrival_date_week_number\",\n",
    "    \"arrival_date_day_of_month\", \"stays_in_weekend_nights\",\n",
    "    \"stays_in_week_nights\", \"adults\", \"children\", \"babies\",\n",
    "    \"is_repeated_guest\", \"previous_cancellations\",\n",
    "    \"previous_bookings_not_canceled\", \"required_car_parking_spaces\",\n",
    "    \"total_of_special_requests\", \"adr\",\n",
    "]\n",
    "features_cat = [\n",
    "    \"hotel\", \"arrival_date_month\", \"meal\",\n",
    "    \"market_segment\", \"distribution_channel\",\n",
    "    \"reserved_room_type\", \"deposit_type\", \"customer_type\",\n",
    "]\n",
    "\n",
    "transformer_num = make_pipeline(\n",
    "    SimpleImputer(strategy=\"constant\"), # there are a few missing values\n",
    "    StandardScaler(),\n",
    ")\n",
    "transformer_cat = make_pipeline(\n",
    "    SimpleImputer(strategy=\"constant\", fill_value=\"NA\"),\n",
    "    OneHotEncoder(handle_unknown='ignore'),\n",
    ")\n",
    "\n",
    "preprocessor = make_column_transformer(\n",
    "    (transformer_num, features_num),\n",
    "    (transformer_cat, features_cat),\n",
    ")\n",
    "\n",
    "# stratify - make sure classes are evenlly represented across splits\n",
    "X_train, X_valid, y_train, y_valid = \\\n",
    "    train_test_split(X, y, stratify=y, train_size=0.75)\n",
    "\n",
    "X_train = preprocessor.fit_transform(X_train)\n",
    "X_valid = preprocessor.transform(X_valid)\n",
    "\n",
    "input_shape = [X_train.shape[1]]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "86bf9052",
   "metadata": {
    "papermill": {
     "duration": 0.004263,
     "end_time": "2024-08-19T19:06:24.391999",
     "exception": false,
     "start_time": "2024-08-19T19:06:24.387736",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 1) Define Model #\n",
    "\n",
    "The model we'll use this time will have both batch normalization and dropout layers. To ease reading we've broken the diagram into blocks, but you can define it layer by layer as usual.\n",
    "\n",
    "Define a model with an architecture given by this diagram:\n",
    "\n",
    "<figure style=\"padding: 1em;\">\n",
    "<img src=\"https://storage.googleapis.com/kaggle-media/learn/images/V04o59Z.png\" width=\"400\" alt=\"Diagram of network architecture: BatchNorm, Dense, BatchNorm, Dropout, Dense, BatchNorm, Dropout, Dense.\">\n",
    "<figcaption style=\"textalign: center; font-style: italic\"><center>Diagram of a binary classifier.</center></figcaption>\n",
    "</figure>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3e6671ce",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-19T19:06:24.402082Z",
     "iopub.status.busy": "2024-08-19T19:06:24.401774Z",
     "iopub.status.idle": "2024-08-19T19:06:37.378797Z",
     "shell.execute_reply": "2024-08-19T19:06:37.377704Z"
    },
    "lines_to_next_cell": 2,
    "papermill": {
     "duration": 13.003579,
     "end_time": "2024-08-19T19:06:37.399950",
     "exception": false,
     "start_time": "2024-08-19T19:06:24.396371",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-08-19 19:06:26.066326: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "2024-08-19 19:06:26.066437: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "2024-08-19 19:06:26.189546: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    },
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.3333333333333333, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"1_Q1\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct</span>"
      ],
      "text/plain": [
       "Correct"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from tensorflow import keras\n",
    "from tensorflow.keras import layers\n",
    "\n",
    "# YOUR CODE HERE: define the model given in the diagram\n",
    "model = keras.Sequential([\n",
    "    layers.BatchNormalization(input_shape=input_shape),\n",
    "    layers.Dense(256, activation='relu'),\n",
    "    layers.BatchNormalization(),\n",
    "    layers.Dropout(0.3),\n",
    "    layers.Dense(256, activation='relu'),\n",
    "    layers.BatchNormalization(),\n",
    "    layers.Dropout(0.3),\n",
    "    layers.Dense(1, activation='sigmoid'),\n",
    "])\n",
    "\n",
    "# Check your answer\n",
    "q_1.check()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d85e1e47",
   "metadata": {
    "papermill": {
     "duration": 0.005696,
     "end_time": "2024-08-19T19:06:37.412877",
     "exception": false,
     "start_time": "2024-08-19T19:06:37.407181",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 2) Add Optimizer, Loss, and Metric #\n",
    "\n",
    "Now compile the model with the Adam optimizer and binary versions of the cross-entropy loss and accuracy metric."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ac5c2997",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-19T19:06:37.424089Z",
     "iopub.status.busy": "2024-08-19T19:06:37.423721Z",
     "iopub.status.idle": "2024-08-19T19:06:37.446889Z",
     "shell.execute_reply": "2024-08-19T19:06:37.446009Z"
    },
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.03114,
     "end_time": "2024-08-19T19:06:37.448937",
     "exception": false,
     "start_time": "2024-08-19T19:06:37.417797",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.3333333333333333, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"2_Q2\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct</span>"
      ],
      "text/plain": [
       "Correct"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# YOUR CODE HERE\n",
    "model.compile(\n",
    "    optimizer='adam',\n",
    "    loss='binary_crossentropy',\n",
    "    metrics=['binary_accuracy'],\n",
    ")\n",
    "\n",
    "# Check your answer\n",
    "q_2.check()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ea2dd9c9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-19T19:06:37.460382Z",
     "iopub.status.busy": "2024-08-19T19:06:37.459717Z",
     "iopub.status.idle": "2024-08-19T19:06:37.463431Z",
     "shell.execute_reply": "2024-08-19T19:06:37.462587Z"
    },
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.011529,
     "end_time": "2024-08-19T19:06:37.465428",
     "exception": false,
     "start_time": "2024-08-19T19:06:37.453899",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Lines below will give you a hint or solution code\n",
    "#q_2.hint()\n",
    "#q_2.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fe5ed708",
   "metadata": {
    "papermill": {
     "duration": 0.004836,
     "end_time": "2024-08-19T19:06:37.475617",
     "exception": false,
     "start_time": "2024-08-19T19:06:37.470781",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Finally, run this cell to train the model and view the learning curves. It may run for around 60 to 70 epochs, which could take a minute or two."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e9c1d2b1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-19T19:06:37.486899Z",
     "iopub.status.busy": "2024-08-19T19:06:37.486421Z",
     "iopub.status.idle": "2024-08-19T19:07:22.238585Z",
     "shell.execute_reply": "2024-08-19T19:07:22.237697Z"
    },
    "papermill": {
     "duration": 44.760365,
     "end_time": "2024-08-19T19:07:22.240947",
     "exception": false,
     "start_time": "2024-08-19T19:06:37.480582",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/200\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1724094401.858619      68 device_compiler.h:186] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "175/175 [==============================] - 6s 7ms/step - loss: 0.4840 - binary_accuracy: 0.7714 - val_loss: 0.4366 - val_binary_accuracy: 0.7876\n",
      "Epoch 2/200\n",
      "175/175 [==============================] - 1s 5ms/step - loss: 0.4224 - binary_accuracy: 0.8018 - val_loss: 0.4066 - val_binary_accuracy: 0.8096\n",
      "Epoch 3/200\n",
      "175/175 [==============================] - 1s 5ms/step - loss: 0.4084 - binary_accuracy: 0.8064 - val_loss: 0.3973 - val_binary_accuracy: 0.8173\n",
      "Epoch 4/200\n",
      "175/175 [==============================] - 1s 6ms/step - loss: 0.4015 - binary_accuracy: 0.8122 - val_loss: 0.3938 - val_binary_accuracy: 0.8190\n",
      "Epoch 5/200\n",
      "175/175 [==============================] - 1s 5ms/step - loss: 0.3965 - binary_accuracy: 0.8141 - val_loss: 0.3901 - val_binary_accuracy: 0.8220\n",
      "Epoch 6/200\n",
      "175/175 [==============================] - 1s 5ms/step - loss: 0.3926 - binary_accuracy: 0.8168 - val_loss: 0.3849 - val_binary_accuracy: 0.8267\n",
      "Epoch 7/200\n",
      "175/175 [==============================] - 1s 5ms/step - loss: 0.3886 - binary_accuracy: 0.8182 - val_loss: 0.3815 - val_binary_accuracy: 0.8243\n",
      "Epoch 8/200\n",
      "175/175 [==============================] - 1s 6ms/step - loss: 0.3846 - binary_accuracy: 0.8212 - val_loss: 0.3781 - val_binary_accuracy: 0.8265\n",
      "Epoch 9/200\n",
      "175/175 [==============================] - 1s 5ms/step - loss: 0.3819 - binary_accuracy: 0.8224 - val_loss: 0.3786 - val_binary_accuracy: 0.8274\n",
      "Epoch 10/200\n",
      "175/175 [==============================] - 1s 5ms/step - loss: 0.3788 - binary_accuracy: 0.8252 - val_loss: 0.3736 - val_binary_accuracy: 0.8315\n",
      "Epoch 11/200\n",
      "175/175 [==============================] - 1s 5ms/step - loss: 0.3758 - binary_accuracy: 0.8261 - val_loss: 0.3747 - val_binary_accuracy: 0.8283\n",
      "Epoch 12/200\n",
      "175/175 [==============================] - 1s 5ms/step - loss: 0.3736 - binary_accuracy: 0.8268 - val_loss: 0.3707 - val_binary_accuracy: 0.8310\n",
      "Epoch 13/200\n",
      "175/175 [==============================] - 1s 5ms/step - loss: 0.3724 - binary_accuracy: 0.8275 - val_loss: 0.3713 - val_binary_accuracy: 0.8324\n",
      "Epoch 14/200\n",
      "175/175 [==============================] - 1s 6ms/step - loss: 0.3690 - binary_accuracy: 0.8297 - val_loss: 0.3682 - val_binary_accuracy: 0.8325\n",
      "Epoch 15/200\n",
      "175/175 [==============================] - 1s 5ms/step - loss: 0.3677 - binary_accuracy: 0.8295 - val_loss: 0.3681 - val_binary_accuracy: 0.8341\n",
      "Epoch 16/200\n",
      "175/175 [==============================] - 1s 5ms/step - loss: 0.3658 - binary_accuracy: 0.8308 - val_loss: 0.3711 - val_binary_accuracy: 0.8313\n",
      "Epoch 17/200\n",
      "175/175 [==============================] - 1s 5ms/step - loss: 0.3650 - binary_accuracy: 0.8310 - val_loss: 0.3660 - val_binary_accuracy: 0.8339\n",
      "Epoch 18/200\n",
      "175/175 [==============================] - 1s 5ms/step - loss: 0.3632 - binary_accuracy: 0.8320 - val_loss: 0.3657 - val_binary_accuracy: 0.8344\n",
      "Epoch 19/200\n",
      "175/175 [==============================] - 1s 5ms/step - loss: 0.3608 - binary_accuracy: 0.8344 - val_loss: 0.3624 - val_binary_accuracy: 0.8361\n",
      "Epoch 20/200\n",
      "175/175 [==============================] - 1s 5ms/step - loss: 0.3580 - binary_accuracy: 0.8347 - val_loss: 0.3611 - val_binary_accuracy: 0.8351\n",
      "Epoch 21/200\n",
      "175/175 [==============================] - 1s 5ms/step - loss: 0.3584 - binary_accuracy: 0.8336 - val_loss: 0.3650 - val_binary_accuracy: 0.8342\n",
      "Epoch 22/200\n",
      "175/175 [==============================] - 1s 5ms/step - loss: 0.3567 - binary_accuracy: 0.8349 - val_loss: 0.3623 - val_binary_accuracy: 0.8366\n",
      "Epoch 23/200\n",
      "175/175 [==============================] - 1s 5ms/step - loss: 0.3550 - binary_accuracy: 0.8357 - val_loss: 0.3595 - val_binary_accuracy: 0.8374\n",
      "Epoch 24/200\n",
      "175/175 [==============================] - 1s 6ms/step - loss: 0.3531 - binary_accuracy: 0.8372 - val_loss: 0.3581 - val_binary_accuracy: 0.8369\n",
      "Epoch 25/200\n",
      "175/175 [==============================] - 1s 6ms/step - loss: 0.3518 - binary_accuracy: 0.8366 - val_loss: 0.3594 - val_binary_accuracy: 0.8354\n",
      "Epoch 26/200\n",
      "175/175 [==============================] - 1s 5ms/step - loss: 0.3517 - binary_accuracy: 0.8378 - val_loss: 0.3576 - val_binary_accuracy: 0.8379\n",
      "Epoch 27/200\n",
      "175/175 [==============================] - 1s 5ms/step - loss: 0.3512 - binary_accuracy: 0.8374 - val_loss: 0.3611 - val_binary_accuracy: 0.8376\n",
      "Epoch 28/200\n",
      "175/175 [==============================] - 1s 5ms/step - loss: 0.3495 - binary_accuracy: 0.8391 - val_loss: 0.3586 - val_binary_accuracy: 0.8387\n",
      "Epoch 29/200\n",
      "175/175 [==============================] - 1s 5ms/step - loss: 0.3500 - binary_accuracy: 0.8384 - val_loss: 0.3565 - val_binary_accuracy: 0.8393\n",
      "Epoch 30/200\n",
      "175/175 [==============================] - 1s 6ms/step - loss: 0.3466 - binary_accuracy: 0.8394 - val_loss: 0.3558 - val_binary_accuracy: 0.8400\n",
      "Epoch 31/200\n",
      "175/175 [==============================] - 1s 6ms/step - loss: 0.3462 - binary_accuracy: 0.8400 - val_loss: 0.3554 - val_binary_accuracy: 0.8401\n",
      "Epoch 32/200\n",
      "175/175 [==============================] - 1s 6ms/step - loss: 0.3452 - binary_accuracy: 0.8410 - val_loss: 0.3547 - val_binary_accuracy: 0.8396\n",
      "Epoch 33/200\n",
      "175/175 [==============================] - 1s 5ms/step - loss: 0.3451 - binary_accuracy: 0.8401 - val_loss: 0.3538 - val_binary_accuracy: 0.8395\n",
      "Epoch 34/200\n",
      "175/175 [==============================] - 1s 5ms/step - loss: 0.3431 - binary_accuracy: 0.8416 - val_loss: 0.3540 - val_binary_accuracy: 0.8394\n",
      "Epoch 35/200\n",
      "175/175 [==============================] - 1s 6ms/step - loss: 0.3431 - binary_accuracy: 0.8402 - val_loss: 0.3517 - val_binary_accuracy: 0.8416\n",
      "Epoch 36/200\n",
      "175/175 [==============================] - 1s 5ms/step - loss: 0.3420 - binary_accuracy: 0.8415 - val_loss: 0.3531 - val_binary_accuracy: 0.8402\n",
      "Epoch 37/200\n",
      "175/175 [==============================] - 1s 5ms/step - loss: 0.3405 - binary_accuracy: 0.8428 - val_loss: 0.3509 - val_binary_accuracy: 0.8404\n",
      "Epoch 38/200\n",
      "175/175 [==============================] - 1s 5ms/step - loss: 0.3407 - binary_accuracy: 0.8420 - val_loss: 0.3517 - val_binary_accuracy: 0.8410\n",
      "Epoch 39/200\n",
      "175/175 [==============================] - 1s 5ms/step - loss: 0.3394 - binary_accuracy: 0.8428 - val_loss: 0.3522 - val_binary_accuracy: 0.8407\n",
      "Epoch 40/200\n",
      "175/175 [==============================] - 1s 5ms/step - loss: 0.3379 - binary_accuracy: 0.8440 - val_loss: 0.3523 - val_binary_accuracy: 0.8395\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Axes: title={'center': 'Accuracy'}>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "early_stopping = keras.callbacks.EarlyStopping(\n",
    "    patience=5,\n",
    "    min_delta=0.001,\n",
    "    restore_best_weights=True,\n",
    ")\n",
    "history = model.fit(\n",
    "    X_train, y_train,\n",
    "    validation_data=(X_valid, y_valid),\n",
    "    batch_size=512,\n",
    "    epochs=200,\n",
    "    callbacks=[early_stopping],\n",
    ")\n",
    "\n",
    "history_df = pd.DataFrame(history.history)\n",
    "history_df.loc[:, ['loss', 'val_loss']].plot(title=\"Cross-entropy\")\n",
    "history_df.loc[:, ['binary_accuracy', 'val_binary_accuracy']].plot(title=\"Accuracy\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6c7c797f",
   "metadata": {
    "papermill": {
     "duration": 0.062019,
     "end_time": "2024-08-19T19:07:22.366453",
     "exception": false,
     "start_time": "2024-08-19T19:07:22.304434",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 3) Train and Evaluate #\n",
    "\n",
    "\n",
    "What do you think about the learning curves? Does it look like the model underfit or overfit? Was the cross-entropy loss a good stand-in for accuracy?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "48d78586",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-19T19:07:22.494978Z",
     "iopub.status.busy": "2024-08-19T19:07:22.494205Z",
     "iopub.status.idle": "2024-08-19T19:07:22.501767Z",
     "shell.execute_reply": "2024-08-19T19:07:22.500928Z"
    },
    "papermill": {
     "duration": 0.0748,
     "end_time": "2024-08-19T19:07:22.503562",
     "exception": false,
     "start_time": "2024-08-19T19:07:22.428762",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.3333333333333333, \"interactionType\": 1, \"questionType\": 4, \"questionId\": \"3_Q3\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct:</span> \n",
       "\n",
       "Though we can see the training loss continuing to fall, the early stopping callback prevented any overfitting. Moreover, the accuracy rose at the same rate as the cross-entropy fell, so it appears that minimizing cross-entropy was a good stand-in. All in all, it looks like this training was a success!"
      ],
      "text/plain": [
       "Correct: \n",
       "\n",
       "Though we can see the training loss continuing to fall, the early stopping callback prevented any overfitting. Moreover, the accuracy rose at the same rate as the cross-entropy fell, so it appears that minimizing cross-entropy was a good stand-in. All in all, it looks like this training was a success!"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# View the solution (Run this cell to receive credit!)\n",
    "q_3.check()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c96e249",
   "metadata": {
    "papermill": {
     "duration": 0.062504,
     "end_time": "2024-08-19T19:07:22.628689",
     "exception": false,
     "start_time": "2024-08-19T19:07:22.566185",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Conclusion #\n",
    "\n",
    "Congratulations! You've completed Kaggle's *Introduction to Deep Learning* course!\n",
    "\n",
    "With your new skills you're ready to take on more advanced applications like computer vision and sentiment classification. What would you like to do next?\n",
    "\n",
    "Why not try one of our *Getting Started* competitions?\n",
    "\n",
    "- Classify images with TPUs in [**Petals to the Metal**](https://www.kaggle.com/c/tpu-getting-started)\n",
    "- Create art with GANs in [**I'm Something of a Painter Myself**](https://www.kaggle.com/c/gan-getting-started)\n",
    "- Classify Tweets in [**Real or Not? NLP with Disaster Tweets**](https://www.kaggle.com/c/nlp-getting-started)\n",
    "- Detect contradiction and entailment in [**Contradictory, My Dear Watson**](https://www.kaggle.com/c/contradictory-my-dear-watson)\n",
    "\n",
    "Until next time, Kagglers!"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c9df0bad",
   "metadata": {
    "papermill": {
     "duration": 0.062895,
     "end_time": "2024-08-19T19:07:22.754668",
     "exception": false,
     "start_time": "2024-08-19T19:07:22.691773",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "---\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "*Have questions or comments? Visit the [course discussion forum](https://www.kaggle.com/learn/intro-to-deep-learning/discussion) to chat with other learners.*"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "cell_metadata_filter": "-all",
   "formats": "ipynb"
  },
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 829369,
     "sourceId": 1480608,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30648,
   "isGpuEnabled": true,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 67.20486,
   "end_time": "2024-08-19T19:07:25.494541",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-08-19T19:06:18.289681",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
