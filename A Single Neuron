{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "ccaf8aa5",
   "metadata": {
    "papermill": {
     "duration": 0.006905,
     "end_time": "2024-08-19T17:02:53.466682",
     "exception": false,
     "start_time": "2024-08-19T17:02:53.459777",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**This notebook is an exercise in the [Intro to Deep Learning](https://www.kaggle.com/learn/intro-to-deep-learning) course.  You can reference the tutorial at [this link](https://www.kaggle.com/ryanholbrook/a-single-neuron).**\n",
    "\n",
    "---\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "811a3904",
   "metadata": {
    "papermill": {
     "duration": 0.005977,
     "end_time": "2024-08-19T17:02:53.479502",
     "exception": false,
     "start_time": "2024-08-19T17:02:53.473525",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Introduction #\n",
    "\n",
    "In the tutorial we learned about the building blocks of neural networks: *linear units*. We saw that a model of just one linear unit will fit a linear function to a dataset (equivalent to linear regression). In this exercise, you'll build a linear model and get some practice working with models in Keras.\n",
    "\n",
    "Before you get started, run the code cell below to set everything up."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "cab660cf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-19T17:02:53.494143Z",
     "iopub.status.busy": "2024-08-19T17:02:53.493330Z",
     "iopub.status.idle": "2024-08-19T17:03:08.706773Z",
     "shell.execute_reply": "2024-08-19T17:03:08.705261Z"
    },
    "papermill": {
     "duration": 15.224871,
     "end_time": "2024-08-19T17:03:08.710375",
     "exception": false,
     "start_time": "2024-08-19T17:02:53.485504",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_18/3895727876.py:4: MatplotlibDeprecationWarning: The seaborn styles shipped by Matplotlib are deprecated since 3.6, as they no longer correspond to the styles shipped by seaborn. However, they will remain available as 'seaborn-v0_8-<style>'. Alternatively, directly use the seaborn API instead.\n",
      "  plt.style.use('seaborn-whitegrid')\n",
      "2024-08-19 17:02:56.531324: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "2024-08-19 17:02:56.531441: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "2024-08-19 17:02:56.705262: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "# Setup plotting\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.style.use('seaborn-whitegrid')\n",
    "# Set Matplotlib defaults\n",
    "plt.rc('figure', autolayout=True)\n",
    "plt.rc('axes', labelweight='bold', labelsize='large',\n",
    "       titleweight='bold', titlesize=18, titlepad=10)\n",
    "\n",
    "# Setup feedback system\n",
    "from learntools.core import binder\n",
    "binder.bind(globals())\n",
    "from learntools.deep_learning_intro.ex1 import *"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cb415167",
   "metadata": {
    "papermill": {
     "duration": 0.007658,
     "end_time": "2024-08-19T17:03:08.726572",
     "exception": false,
     "start_time": "2024-08-19T17:03:08.718914",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The *Red Wine Quality* dataset consists of physiochemical measurements from about 1600 Portuguese red wines.  Also included is a quality rating for each wine from blind taste-tests. \n",
    "\n",
    "First, run the next cell to display the first few rows of this dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "00a0dbdc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-19T17:03:08.748806Z",
     "iopub.status.busy": "2024-08-19T17:03:08.747849Z",
     "iopub.status.idle": "2024-08-19T17:03:08.797369Z",
     "shell.execute_reply": "2024-08-19T17:03:08.796289Z"
    },
    "papermill": {
     "duration": 0.063785,
     "end_time": "2024-08-19T17:03:08.799965",
     "exception": false,
     "start_time": "2024-08-19T17:03:08.736180",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fixed acidity</th>\n",
       "      <th>volatile acidity</th>\n",
       "      <th>citric acid</th>\n",
       "      <th>residual sugar</th>\n",
       "      <th>chlorides</th>\n",
       "      <th>free sulfur dioxide</th>\n",
       "      <th>total sulfur dioxide</th>\n",
       "      <th>density</th>\n",
       "      <th>pH</th>\n",
       "      <th>sulphates</th>\n",
       "      <th>alcohol</th>\n",
       "      <th>quality</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7.4</td>\n",
       "      <td>0.70</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.9</td>\n",
       "      <td>0.076</td>\n",
       "      <td>11.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>0.9978</td>\n",
       "      <td>3.51</td>\n",
       "      <td>0.56</td>\n",
       "      <td>9.4</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7.8</td>\n",
       "      <td>0.88</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.6</td>\n",
       "      <td>0.098</td>\n",
       "      <td>25.0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>0.9968</td>\n",
       "      <td>3.20</td>\n",
       "      <td>0.68</td>\n",
       "      <td>9.8</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7.8</td>\n",
       "      <td>0.76</td>\n",
       "      <td>0.04</td>\n",
       "      <td>2.3</td>\n",
       "      <td>0.092</td>\n",
       "      <td>15.0</td>\n",
       "      <td>54.0</td>\n",
       "      <td>0.9970</td>\n",
       "      <td>3.26</td>\n",
       "      <td>0.65</td>\n",
       "      <td>9.8</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>11.2</td>\n",
       "      <td>0.28</td>\n",
       "      <td>0.56</td>\n",
       "      <td>1.9</td>\n",
       "      <td>0.075</td>\n",
       "      <td>17.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>0.9980</td>\n",
       "      <td>3.16</td>\n",
       "      <td>0.58</td>\n",
       "      <td>9.8</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7.4</td>\n",
       "      <td>0.70</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.9</td>\n",
       "      <td>0.076</td>\n",
       "      <td>11.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>0.9978</td>\n",
       "      <td>3.51</td>\n",
       "      <td>0.56</td>\n",
       "      <td>9.4</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \\\n",
       "0            7.4              0.70         0.00             1.9      0.076   \n",
       "1            7.8              0.88         0.00             2.6      0.098   \n",
       "2            7.8              0.76         0.04             2.3      0.092   \n",
       "3           11.2              0.28         0.56             1.9      0.075   \n",
       "4            7.4              0.70         0.00             1.9      0.076   \n",
       "\n",
       "   free sulfur dioxide  total sulfur dioxide  density    pH  sulphates  \\\n",
       "0                 11.0                  34.0   0.9978  3.51       0.56   \n",
       "1                 25.0                  67.0   0.9968  3.20       0.68   \n",
       "2                 15.0                  54.0   0.9970  3.26       0.65   \n",
       "3                 17.0                  60.0   0.9980  3.16       0.58   \n",
       "4                 11.0                  34.0   0.9978  3.51       0.56   \n",
       "\n",
       "   alcohol  quality  \n",
       "0      9.4        5  \n",
       "1      9.8        5  \n",
       "2      9.8        5  \n",
       "3      9.8        6  \n",
       "4      9.4        5  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "red_wine = pd.read_csv('../input/dl-course-data/red-wine.csv')\n",
    "red_wine.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bfc609eb",
   "metadata": {
    "papermill": {
     "duration": 0.007042,
     "end_time": "2024-08-19T17:03:08.814370",
     "exception": false,
     "start_time": "2024-08-19T17:03:08.807328",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "You can get the number of rows and columns of a dataframe (or a Numpy array) with the `shape` attribute."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "4b6defa1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-19T17:03:08.830940Z",
     "iopub.status.busy": "2024-08-19T17:03:08.830018Z",
     "iopub.status.idle": "2024-08-19T17:03:08.836840Z",
     "shell.execute_reply": "2024-08-19T17:03:08.835747Z"
    },
    "papermill": {
     "duration": 0.017974,
     "end_time": "2024-08-19T17:03:08.839456",
     "exception": false,
     "start_time": "2024-08-19T17:03:08.821482",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1599, 12)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "red_wine.shape # (rows, columns)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2742a912",
   "metadata": {
    "papermill": {
     "duration": 0.007116,
     "end_time": "2024-08-19T17:03:08.853867",
     "exception": false,
     "start_time": "2024-08-19T17:03:08.846751",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 1) Input shape #\n",
    "\n",
    "How well can we predict a wine's perceived quality from the physiochemical measurements?  \n",
    "\n",
    "The target is `'quality'`, and the remaining columns are the features.  How would you set the `input_shape` parameter for a Keras model on this task?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "106c63ea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-19T17:03:08.870010Z",
     "iopub.status.busy": "2024-08-19T17:03:08.869627Z",
     "iopub.status.idle": "2024-08-19T17:03:08.876407Z",
     "shell.execute_reply": "2024-08-19T17:03:08.875447Z"
    },
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.017637,
     "end_time": "2024-08-19T17:03:08.878772",
     "exception": false,
     "start_time": "2024-08-19T17:03:08.861135",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[11]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# YOUR CODE HERE\n",
    "input_shape = [11]\n",
    "input_shape\n",
    "# Check your answer\n",
    "#q_1.check()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c0980764",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-19T17:03:08.894875Z",
     "iopub.status.busy": "2024-08-19T17:03:08.894464Z",
     "iopub.status.idle": "2024-08-19T17:03:08.898793Z",
     "shell.execute_reply": "2024-08-19T17:03:08.897843Z"
    },
    "papermill": {
     "duration": 0.01503,
     "end_time": "2024-08-19T17:03:08.901032",
     "exception": false,
     "start_time": "2024-08-19T17:03:08.886002",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Lines below will give you a hint or solution code\n",
    "#q_1.hint()\n",
    "#q_1.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a25a4857",
   "metadata": {
    "papermill": {
     "duration": 0.006937,
     "end_time": "2024-08-19T17:03:08.915378",
     "exception": false,
     "start_time": "2024-08-19T17:03:08.908441",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 2) Define a linear model\n",
    "\n",
    "Now define a linear model appropriate for this task. Pay attention to how many inputs and outputs the model should have."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "fd6bc3a0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-19T17:03:08.931885Z",
     "iopub.status.busy": "2024-08-19T17:03:08.931101Z",
     "iopub.status.idle": "2024-08-19T17:03:09.143351Z",
     "shell.execute_reply": "2024-08-19T17:03:09.142329Z"
    },
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.223535,
     "end_time": "2024-08-19T17:03:09.146162",
     "exception": false,
     "start_time": "2024-08-19T17:03:08.922627",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.3333333333333333, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"2_Q2\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct</span>"
      ],
      "text/plain": [
       "Correct"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from tensorflow import keras\n",
    "from tensorflow.keras import layers\n",
    "\n",
    "# YOUR CODE HERE\n",
    "model = keras.Sequential([\n",
    "    layers.Dense(units=1, input_shape=[11])\n",
    "])\n",
    "\n",
    "# Check your answer\n",
    "q_2.check()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "59b7c75a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-19T17:03:09.164099Z",
     "iopub.status.busy": "2024-08-19T17:03:09.163722Z",
     "iopub.status.idle": "2024-08-19T17:03:09.168023Z",
     "shell.execute_reply": "2024-08-19T17:03:09.166996Z"
    },
    "papermill": {
     "duration": 0.015192,
     "end_time": "2024-08-19T17:03:09.170187",
     "exception": false,
     "start_time": "2024-08-19T17:03:09.154995",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Lines below will give you a hint or solution code\n",
    "#q_2.hint()\n",
    "#q_2.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8f3cb9de",
   "metadata": {
    "papermill": {
     "duration": 0.007613,
     "end_time": "2024-08-19T17:03:09.185465",
     "exception": false,
     "start_time": "2024-08-19T17:03:09.177852",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 3) Look at the weights\n",
    "\n",
    "Internally, Keras represents the weights of a neural network with **tensors**. Tensors are basically TensorFlow's version of a Numpy array with a few differences that make them better suited to deep learning. One of the most important is that tensors are compatible with [GPU](https://www.kaggle.com/docs/efficient-gpu-usage) and [TPU](https://www.kaggle.com/docs/tpu)) accelerators. TPUs, in fact, are designed specifically for tensor computations.\n",
    "\n",
    "A model's weights are kept in its `weights` attribute as a list of tensors. Get the weights of the model you defined above. (If you want, you could display the weights with something like: `print(\"Weights\\n{}\\n\\nBias\\n{}\".format(w, b))`)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ba2d953e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-19T17:03:09.202547Z",
     "iopub.status.busy": "2024-08-19T17:03:09.202108Z",
     "iopub.status.idle": "2024-08-19T17:03:09.207037Z",
     "shell.execute_reply": "2024-08-19T17:03:09.206005Z"
    },
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.016223,
     "end_time": "2024-08-19T17:03:09.209390",
     "exception": false,
     "start_time": "2024-08-19T17:03:09.193167",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# YOUR CODE HERE\n",
    "w, b = model.weights\n",
    "\n",
    "# Check your answer\n",
    "#q_3.check()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6f96be20",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-19T17:03:09.226013Z",
     "iopub.status.busy": "2024-08-19T17:03:09.225663Z",
     "iopub.status.idle": "2024-08-19T17:03:09.236737Z",
     "shell.execute_reply": "2024-08-19T17:03:09.235580Z"
    },
    "papermill": {
     "duration": 0.022141,
     "end_time": "2024-08-19T17:03:09.239188",
     "exception": false,
     "start_time": "2024-08-19T17:03:09.217047",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Weights\n",
      "<tf.Variable 'dense/kernel:0' shape=(11, 1) dtype=float32, numpy=\n",
      "array([[ 0.6196013 ],\n",
      "       [-0.29832685],\n",
      "       [ 0.65502304],\n",
      "       [ 0.4036495 ],\n",
      "       [-0.06317997],\n",
      "       [-0.5694464 ],\n",
      "       [-0.19101578],\n",
      "       [ 0.24737269],\n",
      "       [-0.34888673],\n",
      "       [ 0.01048446],\n",
      "       [ 0.28294545]], dtype=float32)>\n",
      "\n",
      "Bias\n",
      "<tf.Variable 'dense/bias:0' shape=(1,) dtype=float32, numpy=array([0.], dtype=float32)>\n"
     ]
    }
   ],
   "source": [
    "print(\"Weights\\n{}\\n\\nBias\\n{}\".format(w, b))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "f129d3bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-19T17:03:09.256360Z",
     "iopub.status.busy": "2024-08-19T17:03:09.255784Z",
     "iopub.status.idle": "2024-08-19T17:03:09.260315Z",
     "shell.execute_reply": "2024-08-19T17:03:09.259313Z"
    },
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.016112,
     "end_time": "2024-08-19T17:03:09.262686",
     "exception": false,
     "start_time": "2024-08-19T17:03:09.246574",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Lines below will give you a hint or solution code\n",
    "#q_3.hint()\n",
    "#q_3.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "997d11e5",
   "metadata": {
    "papermill": {
     "duration": 0.007393,
     "end_time": "2024-08-19T17:03:09.277902",
     "exception": false,
     "start_time": "2024-08-19T17:03:09.270509",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "(By the way, Keras represents weights as tensors, but also uses tensors to represent data. When you set the `input_shape` argument, you are telling Keras the dimensions of the array it should expect for each example in the training data. Setting `input_shape=[3]` would create a network accepting vectors of length 3, like `[0.2, 0.4, 0.6]`.)\n",
    " \n",
    "\n",
    "# Optional: Plot the output of an untrained linear model\n",
    " \n",
    "The kinds of problems we'll work on through Lesson 5 will be *regression* problems, where the goal is to predict some numeric target. Regression problems are like \"curve-fitting\" problems: we're trying to find a curve that best fits the data. Let's take a look at the \"curve\" produced by a linear model. (You've probably guessed that it's a line!)\n",
    " \n",
    "We mentioned that before training a model's weights are set randomly. Run the cell below a few times to see the different lines produced with a random initialization. (There's no coding for this exercise -- it's just a demonstration.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "211dcfee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-19T17:03:09.295472Z",
     "iopub.status.busy": "2024-08-19T17:03:09.294538Z",
     "iopub.status.idle": "2024-08-19T17:03:09.945475Z",
     "shell.execute_reply": "2024-08-19T17:03:09.944403Z"
    },
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.662422,
     "end_time": "2024-08-19T17:03:09.948023",
     "exception": false,
     "start_time": "2024-08-19T17:03:09.285601",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4/4 [==============================] - 0s 2ms/step\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "model = keras.Sequential([\n",
    "    layers.Dense(1, input_shape=[1]),\n",
    "])\n",
    "\n",
    "x = tf.linspace(-1.0, 1.0, 100)\n",
    "y = model.predict(x)\n",
    "\n",
    "plt.figure(dpi=100)\n",
    "plt.plot(x, y, 'k')\n",
    "plt.xlim(-1, 1)\n",
    "plt.ylim(-1, 1)\n",
    "plt.xlabel(\"Input: x\")\n",
    "plt.ylabel(\"Target y\")\n",
    "w, b = model.weights # you could also use model.get_weights() here\n",
    "plt.title(\"Weight: {:0.2f}\\nBias: {:0.2f}\".format(w[0][0], b[0]))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d4aee8bf",
   "metadata": {
    "papermill": {
     "duration": 0.008503,
     "end_time": "2024-08-19T17:03:09.965212",
     "exception": false,
     "start_time": "2024-08-19T17:03:09.956709",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Keep Going #\n",
    "\n",
    "Add hidden layers and [**make your models deep**](https://www.kaggle.com/ryanholbrook/deep-neural-networks) in Lesson 2."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "907ef064",
   "metadata": {
    "papermill": {
     "duration": 0.008204,
     "end_time": "2024-08-19T17:03:09.981861",
     "exception": false,
     "start_time": "2024-08-19T17:03:09.973657",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "---\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "*Have questions or comments? Visit the [course discussion forum](https://www.kaggle.com/learn/intro-to-deep-learning/discussion) to chat with other learners.*"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "cell_metadata_filter": "-all",
   "formats": "ipynb"
  },
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 829369,
     "sourceId": 1480608,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30646,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 20.914752,
   "end_time": "2024-08-19T17:03:11.414103",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-08-19T17:02:50.499351",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
