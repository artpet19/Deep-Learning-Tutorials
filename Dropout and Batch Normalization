{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "58cf9b26",
   "metadata": {
    "papermill": {
     "duration": 0.006704,
     "end_time": "2024-08-19T18:36:40.224643",
     "exception": false,
     "start_time": "2024-08-19T18:36:40.217939",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**This notebook is an exercise in the [Intro to Deep Learning](https://www.kaggle.com/learn/intro-to-deep-learning) course.  You can reference the tutorial at [this link](https://www.kaggle.com/ryanholbrook/dropout-and-batch-normalization).**\n",
    "\n",
    "---\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8b7316fb",
   "metadata": {
    "papermill": {
     "duration": 0.005858,
     "end_time": "2024-08-19T18:36:40.236869",
     "exception": false,
     "start_time": "2024-08-19T18:36:40.231011",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Introduction #\n",
    "\n",
    "In this exercise, you'll add dropout to the *Spotify* model from Exercise 4 and see how batch normalization can let you successfully train models on difficult datasets.\n",
    "\n",
    "Run the next cell to get started!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a6c6a06b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-19T18:36:40.250684Z",
     "iopub.status.busy": "2024-08-19T18:36:40.250320Z",
     "iopub.status.idle": "2024-08-19T18:36:41.004059Z",
     "shell.execute_reply": "2024-08-19T18:36:41.003287Z"
    },
    "papermill": {
     "duration": 0.763455,
     "end_time": "2024-08-19T18:36:41.006403",
     "exception": false,
     "start_time": "2024-08-19T18:36:40.242948",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_26/195640296.py:3: MatplotlibDeprecationWarning: The seaborn styles shipped by Matplotlib are deprecated since 3.6, as they no longer correspond to the styles shipped by seaborn. However, they will remain available as 'seaborn-v0_8-<style>'. Alternatively, directly use the seaborn API instead.\n",
      "  plt.style.use('seaborn-whitegrid')\n"
     ]
    }
   ],
   "source": [
    "# Setup plotting\n",
    "import matplotlib.pyplot as plt\n",
    "plt.style.use('seaborn-whitegrid')\n",
    "# Set Matplotlib defaults\n",
    "plt.rc('figure', autolayout=True)\n",
    "plt.rc('axes', labelweight='bold', labelsize='large',\n",
    "       titleweight='bold', titlesize=18, titlepad=10)\n",
    "plt.rc('animation', html='html5')\n",
    "\n",
    "# Setup feedback system\n",
    "from learntools.core import binder\n",
    "binder.bind(globals())\n",
    "from learntools.deep_learning_intro.ex5 import *"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "25f61948",
   "metadata": {
    "papermill": {
     "duration": 0.0062,
     "end_time": "2024-08-19T18:36:41.019133",
     "exception": false,
     "start_time": "2024-08-19T18:36:41.012933",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "First load the *Spotify* dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b7574412",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-19T18:36:41.033593Z",
     "iopub.status.busy": "2024-08-19T18:36:41.032662Z",
     "iopub.status.idle": "2024-08-19T18:36:55.020391Z",
     "shell.execute_reply": "2024-08-19T18:36:55.019383Z"
    },
    "papermill": {
     "duration": 13.997284,
     "end_time": "2024-08-19T18:36:55.022580",
     "exception": false,
     "start_time": "2024-08-19T18:36:41.025296",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-08-19 18:36:43.870344: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "2024-08-19 18:36:43.870458: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "2024-08-19 18:36:43.995593: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Input shape: [18]\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
    "from sklearn.compose import make_column_transformer\n",
    "from sklearn.model_selection import GroupShuffleSplit\n",
    "\n",
    "from tensorflow import keras\n",
    "from tensorflow.keras import layers\n",
    "from tensorflow.keras import callbacks\n",
    "\n",
    "spotify = pd.read_csv('../input/dl-course-data/spotify.csv')\n",
    "\n",
    "X = spotify.copy().dropna()\n",
    "y = X.pop('track_popularity')\n",
    "artists = X['track_artist']\n",
    "\n",
    "features_num = ['danceability', 'energy', 'key', 'loudness', 'mode',\n",
    "                'speechiness', 'acousticness', 'instrumentalness',\n",
    "                'liveness', 'valence', 'tempo', 'duration_ms']\n",
    "features_cat = ['playlist_genre']\n",
    "\n",
    "preprocessor = make_column_transformer(\n",
    "    (StandardScaler(), features_num),\n",
    "    (OneHotEncoder(), features_cat),\n",
    ")\n",
    "\n",
    "def group_split(X, y, group, train_size=0.75):\n",
    "    splitter = GroupShuffleSplit(train_size=train_size)\n",
    "    train, test = next(splitter.split(X, y, groups=group))\n",
    "    return (X.iloc[train], X.iloc[test], y.iloc[train], y.iloc[test])\n",
    "\n",
    "X_train, X_valid, y_train, y_valid = group_split(X, y, artists)\n",
    "\n",
    "X_train = preprocessor.fit_transform(X_train)\n",
    "X_valid = preprocessor.transform(X_valid)\n",
    "y_train = y_train / 100\n",
    "y_valid = y_valid / 100\n",
    "\n",
    "input_shape = [X_train.shape[1]]\n",
    "print(\"Input shape: {}\".format(input_shape))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c1fb3458",
   "metadata": {
    "papermill": {
     "duration": 0.00663,
     "end_time": "2024-08-19T18:36:55.051755",
     "exception": false,
     "start_time": "2024-08-19T18:36:55.045125",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 1) Add Dropout to Spotify Model\n",
    "\n",
    "Here is the last model from Exercise 4. Add two dropout layers, one after the `Dense` layer with 128 units, and one after the `Dense` layer with 64 units. Set the dropout rate on both to `0.3`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0089d493",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-19T18:36:55.066444Z",
     "iopub.status.busy": "2024-08-19T18:36:55.066076Z",
     "iopub.status.idle": "2024-08-19T18:36:55.828284Z",
     "shell.execute_reply": "2024-08-19T18:36:55.827373Z"
    },
    "lines_to_next_cell": 2,
    "papermill": {
     "duration": 0.772373,
     "end_time": "2024-08-19T18:36:55.830725",
     "exception": false,
     "start_time": "2024-08-19T18:36:55.058352",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.25, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"1_Q1\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct</span>"
      ],
      "text/plain": [
       "Correct"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# YOUR CODE HERE: Add two 30% dropout layers, one after 128 and one after 64\n",
    "model = keras.Sequential([\n",
    "    layers.Dense(128, activation='relu', input_shape=input_shape),\n",
    "    layers.Dropout(0.3),\n",
    "    layers.Dense(64, activation='relu'),\n",
    "    layers.Dropout(0.3),\n",
    "    layers.Dense(1)\n",
    "])\n",
    "\n",
    "# Check your answer\n",
    "q_1.check()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ec82121b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-19T18:36:55.845808Z",
     "iopub.status.busy": "2024-08-19T18:36:55.845442Z",
     "iopub.status.idle": "2024-08-19T18:36:55.849412Z",
     "shell.execute_reply": "2024-08-19T18:36:55.848526Z"
    },
    "papermill": {
     "duration": 0.013949,
     "end_time": "2024-08-19T18:36:55.851431",
     "exception": false,
     "start_time": "2024-08-19T18:36:55.837482",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Lines below will give you a hint or solution code\n",
    "#q_1.hint()\n",
    "#q_1.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d8d0a63f",
   "metadata": {
    "papermill": {
     "duration": 0.006898,
     "end_time": "2024-08-19T18:36:55.865275",
     "exception": false,
     "start_time": "2024-08-19T18:36:55.858377",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now run this next cell to train the model see the effect of adding dropout."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "3318408f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-19T18:36:55.881974Z",
     "iopub.status.busy": "2024-08-19T18:36:55.881063Z",
     "iopub.status.idle": "2024-08-19T18:37:07.652843Z",
     "shell.execute_reply": "2024-08-19T18:37:07.651865Z"
    },
    "papermill": {
     "duration": 11.783115,
     "end_time": "2024-08-19T18:37:07.655131",
     "exception": false,
     "start_time": "2024-08-19T18:36:55.872016",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1724092618.423910      67 device_compiler.h:186] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Minimum Validation Loss: 0.1942\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model.compile(\n",
    "    optimizer='adam',\n",
    "    loss='mae',\n",
    ")\n",
    "history = model.fit(\n",
    "    X_train, y_train,\n",
    "    validation_data=(X_valid, y_valid),\n",
    "    batch_size=512,\n",
    "    epochs=50,\n",
    "    verbose=0,\n",
    ")\n",
    "history_df = pd.DataFrame(history.history)\n",
    "history_df.loc[:, ['loss', 'val_loss']].plot()\n",
    "print(\"Minimum Validation Loss: {:0.4f}\".format(history_df['val_loss'].min()))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "756cad81",
   "metadata": {
    "papermill": {
     "duration": 0.007706,
     "end_time": "2024-08-19T18:37:07.670918",
     "exception": false,
     "start_time": "2024-08-19T18:37:07.663212",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 2) Evaluate Dropout\n",
    "\n",
    "Recall from Exercise 4 that this model tended to overfit the data around epoch 5. Did adding dropout seem to help prevent overfitting this time?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "a3d9fbfb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-19T18:37:07.687366Z",
     "iopub.status.busy": "2024-08-19T18:37:07.687026Z",
     "iopub.status.idle": "2024-08-19T18:37:07.695313Z",
     "shell.execute_reply": "2024-08-19T18:37:07.694401Z"
    },
    "papermill": {
     "duration": 0.018998,
     "end_time": "2024-08-19T18:37:07.697286",
     "exception": false,
     "start_time": "2024-08-19T18:37:07.678288",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.25, \"interactionType\": 1, \"questionType\": 4, \"questionId\": \"2_Q2\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct:</span> \n",
       "\n",
       "\n",
       "From the learning curves, you can see that the validation loss remains near a constant minimum even though the training loss continues to decrease. So we can see that adding dropout did prevent overfitting this time. Moreover, by making it harder for the network to fit spurious patterns, dropout may have encouraged the network to seek out more of the true patterns, possibly improving the validation loss some as well).\n"
      ],
      "text/plain": [
       "Correct: \n",
       "\n",
       "\n",
       "From the learning curves, you can see that the validation loss remains near a constant minimum even though the training loss continues to decrease. So we can see that adding dropout did prevent overfitting this time. Moreover, by making it harder for the network to fit spurious patterns, dropout may have encouraged the network to seek out more of the true patterns, possibly improving the validation loss some as well)."
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# View the solution (Run this cell to receive credit!)\n",
    "q_2.check()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "00cf42fe",
   "metadata": {
    "papermill": {
     "duration": 0.007449,
     "end_time": "2024-08-19T18:37:07.712583",
     "exception": false,
     "start_time": "2024-08-19T18:37:07.705134",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now, we'll switch topics to explore how batch normalization can fix problems in training.\n",
    "\n",
    "Load the *Concrete* dataset. We won't do any standardization this time. This will make the effect of batch normalization much more apparent."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "dc9e0fd8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-19T18:37:07.730259Z",
     "iopub.status.busy": "2024-08-19T18:37:07.729872Z",
     "iopub.status.idle": "2024-08-19T18:37:07.749600Z",
     "shell.execute_reply": "2024-08-19T18:37:07.748668Z"
    },
    "papermill": {
     "duration": 0.032092,
     "end_time": "2024-08-19T18:37:07.752354",
     "exception": false,
     "start_time": "2024-08-19T18:37:07.720262",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "concrete = pd.read_csv('../input/dl-course-data/concrete.csv')\n",
    "df = concrete.copy()\n",
    "\n",
    "df_train = df.sample(frac=0.7, random_state=0)\n",
    "df_valid = df.drop(df_train.index)\n",
    "\n",
    "X_train = df_train.drop('CompressiveStrength', axis=1)\n",
    "X_valid = df_valid.drop('CompressiveStrength', axis=1)\n",
    "y_train = df_train['CompressiveStrength']\n",
    "y_valid = df_valid['CompressiveStrength']\n",
    "\n",
    "input_shape = [X_train.shape[1]]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b170dd96",
   "metadata": {
    "papermill": {
     "duration": 0.007609,
     "end_time": "2024-08-19T18:37:07.768761",
     "exception": false,
     "start_time": "2024-08-19T18:37:07.761152",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Run the following cell to train the network on the unstandardized *Concrete* data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "3555779c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-19T18:37:07.785907Z",
     "iopub.status.busy": "2024-08-19T18:37:07.785271Z",
     "iopub.status.idle": "2024-08-19T18:37:15.375294Z",
     "shell.execute_reply": "2024-08-19T18:37:15.373871Z"
    },
    "papermill": {
     "duration": 7.601641,
     "end_time": "2024-08-19T18:37:15.378204",
     "exception": false,
     "start_time": "2024-08-19T18:37:07.776563",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Minimum Validation Loss: nan\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = keras.Sequential([\n",
    "    layers.Dense(512, activation='relu', input_shape=input_shape),\n",
    "    layers.Dense(512, activation='relu'),    \n",
    "    layers.Dense(512, activation='relu'),\n",
    "    layers.Dense(1),\n",
    "])\n",
    "model.compile(\n",
    "    optimizer='sgd', # SGD is more sensitive to differences of scale\n",
    "    loss='mae',\n",
    "    metrics=['mae'],\n",
    ")\n",
    "history = model.fit(\n",
    "    X_train, y_train,\n",
    "    validation_data=(X_valid, y_valid),\n",
    "    batch_size=64,\n",
    "    epochs=100,\n",
    "    verbose=0,\n",
    ")\n",
    "\n",
    "history_df = pd.DataFrame(history.history)\n",
    "history_df.loc[0:, ['loss', 'val_loss']].plot()\n",
    "print((\"Minimum Validation Loss: {:0.4f}\").format(history_df['val_loss'].min()))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b763f0f9",
   "metadata": {
    "papermill": {
     "duration": 0.012713,
     "end_time": "2024-08-19T18:37:15.402054",
     "exception": false,
     "start_time": "2024-08-19T18:37:15.389341",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Did you end up with a blank graph? Trying to train this network on this dataset will usually fail. Even when it does converge (due to a lucky weight initialization), it tends to converge to a very large number.\n",
    "\n",
    "# 3) Add Batch Normalization Layers\n",
    "\n",
    "Batch normalization can help correct problems like this.\n",
    "\n",
    "Add four `BatchNormalization` layers, one before each of the dense layers. (Remember to move the `input_shape` argument to the new first layer.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "9d99c2bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-19T18:37:15.426427Z",
     "iopub.status.busy": "2024-08-19T18:37:15.425903Z",
     "iopub.status.idle": "2024-08-19T18:37:15.457187Z",
     "shell.execute_reply": "2024-08-19T18:37:15.456364Z"
    },
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.045882,
     "end_time": "2024-08-19T18:37:15.459452",
     "exception": false,
     "start_time": "2024-08-19T18:37:15.413570",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.25, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"3_Q3\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct</span>"
      ],
      "text/plain": [
       "Correct"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# YOUR CODE HERE: Add a BatchNormalization layer before each Dense layer\n",
    "model = keras.Sequential([\n",
    "    layers.BatchNormalization(),\n",
    "    layers.Dense(512, activation='relu', input_shape=input_shape),\n",
    "    layers.BatchNormalization(),\n",
    "    layers.Dense(512, activation='relu'),\n",
    "    layers.BatchNormalization(),\n",
    "    layers.Dense(512, activation='relu'),\n",
    "    layers.BatchNormalization(),\n",
    "    layers.Dense(1),\n",
    "])\n",
    "\n",
    "# Check your answer\n",
    "q_3.check()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "70d8a29d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-19T18:37:15.477468Z",
     "iopub.status.busy": "2024-08-19T18:37:15.477139Z",
     "iopub.status.idle": "2024-08-19T18:37:15.481092Z",
     "shell.execute_reply": "2024-08-19T18:37:15.480254Z"
    },
    "papermill": {
     "duration": 0.015241,
     "end_time": "2024-08-19T18:37:15.483074",
     "exception": false,
     "start_time": "2024-08-19T18:37:15.467833",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Lines below will give you a hint or solution code\n",
    "#q_3.hint()\n",
    "#q_3.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a3480739",
   "metadata": {
    "papermill": {
     "duration": 0.008214,
     "end_time": "2024-08-19T18:37:15.499756",
     "exception": false,
     "start_time": "2024-08-19T18:37:15.491542",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Run the next cell to see if batch normalization will let us train the model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "bfb6f375",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-19T18:37:15.517796Z",
     "iopub.status.busy": "2024-08-19T18:37:15.517175Z",
     "iopub.status.idle": "2024-08-19T18:37:27.471560Z",
     "shell.execute_reply": "2024-08-19T18:37:27.470649Z"
    },
    "papermill": {
     "duration": 11.966275,
     "end_time": "2024-08-19T18:37:27.474186",
     "exception": false,
     "start_time": "2024-08-19T18:37:15.507911",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Minimum Validation Loss: 3.8978\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model.compile(\n",
    "    optimizer='sgd',\n",
    "    loss='mae',\n",
    "    metrics=['mae'],\n",
    ")\n",
    "EPOCHS = 100\n",
    "history = model.fit(\n",
    "    X_train, y_train,\n",
    "    validation_data=(X_valid, y_valid),\n",
    "    batch_size=64,\n",
    "    epochs=EPOCHS,\n",
    "    verbose=0,\n",
    ")\n",
    "\n",
    "history_df = pd.DataFrame(history.history)\n",
    "history_df.loc[0:, ['loss', 'val_loss']].plot()\n",
    "print((\"Minimum Validation Loss: {:0.4f}\").format(history_df['val_loss'].min()))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e627e60b",
   "metadata": {
    "papermill": {
     "duration": 0.008926,
     "end_time": "2024-08-19T18:37:27.492366",
     "exception": false,
     "start_time": "2024-08-19T18:37:27.483440",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 4) Evaluate Batch Normalization\n",
    "\n",
    "Did adding batch normalization help?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "5c9bfac1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-19T18:37:27.512459Z",
     "iopub.status.busy": "2024-08-19T18:37:27.511575Z",
     "iopub.status.idle": "2024-08-19T18:37:27.519346Z",
     "shell.execute_reply": "2024-08-19T18:37:27.518473Z"
    },
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.019895,
     "end_time": "2024-08-19T18:37:27.521429",
     "exception": false,
     "start_time": "2024-08-19T18:37:27.501534",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.25, \"interactionType\": 1, \"questionType\": 4, \"questionId\": \"4_Q4\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct:</span> \n",
       "\n",
       "\n",
       "You can see that adding batch normalization was a big improvement on the first attempt! By adaptively scaling the data as it passes through the network, batch normalization can let you train models on difficult datasets.\n"
      ],
      "text/plain": [
       "Correct: \n",
       "\n",
       "\n",
       "You can see that adding batch normalization was a big improvement on the first attempt! By adaptively scaling the data as it passes through the network, batch normalization can let you train models on difficult datasets."
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# View the solution (Run this cell to receive credit!)\n",
    "q_4.check()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9092a8e8",
   "metadata": {
    "papermill": {
     "duration": 0.009046,
     "end_time": "2024-08-19T18:37:27.539945",
     "exception": false,
     "start_time": "2024-08-19T18:37:27.530899",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Keep Going #\n",
    "\n",
    "[**Create neural networks**](https://www.kaggle.com/ryanholbrook/binary-classification) for binary classification."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e1cdc96f",
   "metadata": {
    "papermill": {
     "duration": 0.009087,
     "end_time": "2024-08-19T18:37:27.558290",
     "exception": false,
     "start_time": "2024-08-19T18:37:27.549203",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "---\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "*Have questions or comments? Visit the [course discussion forum](https://www.kaggle.com/learn/intro-to-deep-learning/discussion) to chat with other learners.*"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "cell_metadata_filter": "-all",
   "formats": "ipynb"
  },
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 829369,
     "sourceId": 1480608,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30648,
   "isGpuEnabled": true,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 53.20507,
   "end_time": "2024-08-19T18:37:30.652029",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-08-19T18:36:37.446959",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
